// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	net "net"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi(in *jlexer.Lexer, out *Peer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_key":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.PublicKey[:], in.Bytes())
			}
		case "endpoint":
			out.Endpoint = string(in.String())
		case "keep_alive_interval":
			out.PersistentKeepAliveInterval = time.Duration(in.Int64())
		case "allowed_ips":
			if in.IsNull() {
				in.Skip()
				out.AllowedIPs = nil
			} else {
				in.Delim('[')
				if out.AllowedIPs == nil {
					if !in.IsDelim(']') {
						out.AllowedIPs = make([]net.IPNet, 0, 1)
					} else {
						out.AllowedIPs = []net.IPNet{}
					}
				} else {
					out.AllowedIPs = (out.AllowedIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v2 net.IPNet
					easyjsonC1cedd36DecodeNet(in, &v2)
					out.AllowedIPs = append(out.AllowedIPs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi(out *jwriter.Writer, in Peer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_key\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.PublicKey[:])
	}
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix)
		out.String(string(in.Endpoint))
	}
	{
		const prefix string = ",\"keep_alive_interval\":"
		out.RawString(prefix)
		out.Int64(int64(in.PersistentKeepAliveInterval))
	}
	{
		const prefix string = ",\"allowed_ips\":"
		out.RawString(prefix)
		if in.AllowedIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.AllowedIPs {
				if v4 > 0 {
					out.RawByte(',')
				}
				easyjsonC1cedd36EncodeNet(out, v5)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Peer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Peer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Peer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Peer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi(l, v)
}
func easyjsonC1cedd36DecodeNet(in *jlexer.Lexer, out *net.IPNet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IP":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.IP).UnmarshalText(data))
			}
		case "Mask":
			if in.IsNull() {
				in.Skip()
				out.Mask = nil
			} else {
				out.Mask = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeNet(out *jwriter.Writer, in net.IPNet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IP\":"
		out.RawString(prefix[1:])
		out.RawText((in.IP).MarshalText())
	}
	{
		const prefix string = ",\"Mask\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Mask)
	}
	out.RawByte('}')
}
func easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi1(in *jlexer.Lexer, out *Creds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public_key":
			out.PublicKey = string(in.String())
		case "signature":
			out.Signature = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi1(out *jwriter.Writer, in Creds) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"public_key\":"
		out.RawString(prefix[1:])
		out.String(string(in.PublicKey))
	}
	{
		const prefix string = ",\"signature\":"
		out.RawString(prefix)
		out.String(string(in.Signature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Creds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Creds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Creds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Creds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi1(l, v)
}
func easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi2(in *jlexer.Lexer, out *Conf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "listen_port":
			out.ListenPort = int(in.Int())
		case "peers":
			if in.IsNull() {
				in.Skip()
				out.Peers = nil
			} else {
				in.Delim('[')
				if out.Peers == nil {
					if !in.IsDelim(']') {
						out.Peers = make([]Peer, 0, 0)
					} else {
						out.Peers = []Peer{}
					}
				} else {
					out.Peers = (out.Peers)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Peer
					(v9).UnmarshalEasyJSON(in)
					out.Peers = append(out.Peers, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi2(out *jwriter.Writer, in Conf) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"listen_port\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ListenPort))
	}
	{
		const prefix string = ",\"peers\":"
		out.RawString(prefix)
		if in.Peers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Peers {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGithubComCodexTeamHawkCloudManagerPkgApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGithubComCodexTeamHawkCloudManagerPkgApi2(l, v)
}
